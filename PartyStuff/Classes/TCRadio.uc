//================================================
// Local Radio Player
//================================================
Class TCRadio extends DeusExWeapon;

var int PlaySlot;
var() music myTrackList[10];
var() EMusicTransition Transition;
var() byte             SongSection;
var() byte             CdTrack;
var() name Inheriter;
var int Max;

replication
{
reliable if (Role == ROLE_Authority)  //function must be sent to client
 ActivateMusicBotScreen;
}

simulated function bool TestMPBeltSpot(int BeltSpot)
{
   return ( (BeltSpot >= 1) && (BeltSpot <=9) );
}

function ToggleMusicLock(DeusExPlayer Them)
{
local MusicMemory MM;
local bool bFound;
	foreach AllActors(class'MusicMemory', MM)
	{
		if(MM.Watcher == Them)
		{
					bFound=True;
			MM.bMMLocked = !MM.bMMLocked;
			Them.ClientMessage("Music lock status:"@MM.bMMLocked);
		}
	}
	if(!bFound)
	{
		MM = Spawn(class'MusicMemory');
		MM.Watcher=Them;
		Log("New music memory."@them.playerreplicationinfo.playername);
	}
}

function MemorizeMusic(music This, DeusExPlayer Them)
{
local MusicMemory MM;
local bool bFound;
	foreach AllActors(class'MusicMemory', MM)
	{
		if(MM.Watcher == Them)
		{
					bFound=True;
			MM.CurrentSong = This;
			//Log("Track memorized."@This@them.playerreplicationinfo.playername);
			Them.ClientSetMusic( This, SongSection, CdTrack, Transition );
		}
	}
	if(!bFound)
	{
		MM = Spawn(class'MusicMemory');
		MM.Watcher=Them;
		Log("New music memory."@This@them.playerreplicationinfo.playername);
	}
}

function bool mmIsPlaying(music This, DeusExPlayer Them)
{
local MusicMemory MM;
local bool bFound;

	foreach AllActors(class'MusicMemory', MM)
	{
		if(MM.Watcher == Them)
		{
			bFound=True;
			if(MM.CurrentSong == This)
				return true;
		}
	}
	
	if(!bFound)
	{
		MM = Spawn(class'MusicMemory');
		MM.Watcher=Them;
		Log("New music memory."@This@them.playerreplicationinfo.playername);
	}
}

function Inherit()
{
local MusicPoint MPP;
local int j;

	Log("Radio probably summoned? Getting inheritance from a Music Point.");
	foreach allactors(class'MusicPoint',MPP)
	{
		if(MPP != None) //First one we found.
		{
			for(j=0;j<10;j++)
			{
				myTrackList[j] = mpp.myTrackList[j];
			}
			return;
		}
	}
}

function bool MMLocked(DeusExPlayer Them)
{
local MusicMemory MM;
	foreach AllActors(class'MusicMemory', MM)
	{
		if(MM.Watcher == Them)
		{
			return MM.bMMLocked;
		}
	}
}

function BeginPlay()
{
local MusicPoint MPP;
local int j;
PlaySlot = 0;
		if(myTrackList[0] == None)
		{
			Inherit();
		}
		
		for(j=0;j<10;j++)
		{
			if(myTrackList[j] == None)
			Max = j;
			return;
		}
}


function BecomePickup()
{
   Super(Inventory).BecomePickup();
   lifespan=0;
   SetDisplayProperties(Default.Style, Default.Texture, Default.bUnlit, Default.bMeshEnviromap );
}

function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z)
{
	if(Other.isa('DeusExPlayer'))
	{
		if(!mmIsPlaying( myTrackList[PlaySlot], DeusExPlayer(Other)) && !mmLocked(DeusExPlayer(Other)))
		{
			MemorizeMusic(myTrackList[PlaySlot], DeusExPlayer(Other));
			//DeusExPlayer(Other).ClientSetMusic( myTrackList[PlaySlot], SongSection, CdTrack, Transition );
			DeusExPlayer(Other).ClientMessage("RADIO: Now playing track: "$Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), ".")));
			DeusExPlayer(Owner).ClientMessage(Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), "."))$" sent to "$DeusExPlayer(Other).PlayerReplicationInfo.PlayerName);
		}
	}
}

simulated function float CalculateAccuracy()
{
	return 0.000000; //Dirty hack to always return dead on accuracy.
}

state NormalFire //(Thanks to JimBowen for this Infinite ammo code) 
{ 
   Begin: 
      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) 
      { 
         if (!bAutomatic) 
         { 
            bFiring = False; 
            FinishAnim(); 
         } 
    
         if (Owner != None) 
         { 
            if (Owner.IsA('DeusExPlayer')) 
            { 
               bFiring = False; 
            } 
            else if (Owner.IsA('ScriptedPawn')) 
            { 
               bFiring = False; 
               ReloadAmmo(); 
            } 
         } 
         else 
         { 
            if (bHasMuzzleFlash) 
               EraseMuzzleFlashTexture(); 
            GotoState('Idle'); 
         } 
      } 
      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) 
         GotoState('Idle'); 
    
      Sleep(GetShotTime()); 
      if (bAutomatic) 
      { 
         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when 
         Goto('Begin'); 
      } 
      bFiring = False; 
      FinishAnim(); 
    
   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a 
      // single-use weapon so destroy it after firing once 
      if ((ReloadCount == 0) && !bHandToHand) 
      { 
         if (DeusExPlayer(Owner) != None) 
            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid 
         Destroy(); 
      } 
      */              // Do I REALLY need all that crap JUST for infinite ammo? 
      ReadyToFire(); 
   Done: 
      bFiring = False; 
      Finish(); 
}

function ScopeToggle() 
{ 
local DeusExPlayer P;
		P = DeusExPlayer(Owner);
		if( P==None )
			return;
		PlaySlot++;
		if(myTrackList[PlaySlot] == None || PlaySlot > Arraycount(myTrackList))
		{    
			//P.ClientMessage("No more songs.");
			PlaySlot = 0;
		}		
		// Go to music.
		//P.ClientSetMusic( myTrackList[PlaySlot], SongSection, CdTrack, Transition );
		if(!mmIsPlaying( myTrackList[PlaySlot], P))
			MemorizeMusic(myTrackList[PlaySlot], P);
		P.ClientMessage("Now playing track: "$Left(string(myTrackList[PlaySlot]), InStr(string(myTrackList[PlaySlot]), ".")));
		return;
}

function LaserToggle()
{
local DeusExPlayer P;
		P = DeusExPlayer(Owner);
		if( P==None )
			return;
		
		  ActivateMusicBotScreen(p);
}

function CycleAmmo()
{
	ToggleMusicLock(DeusExPlayer(Owner));
}

simulated function ActivateMusicBotScreen(DeusExPlayer player2)
{
local DeusExRootWindow root;
local MusicBotWindow winMusic;

player2.InitRootWindow();
root = DeusExRootWindow(player2.rootWindow);
if (root != None)
 {
 winMusic = MusicBotWindow(root.InvokeUIScreen(Class'MusicBotWindow', True));
 }
}

defaultproperties
{
     Transition=MTRAN_Fade
     CdTrack=255
     LowAmmoWaterMark=0
     NoiseLevel=1.800000
     ShotTime=1.000000
     reloadTime=0.030000
     HitDamage=0
     maxRange=48000
     AccurateRange=12000
     BaseAccuracy=0.000000
     bHasScope=True
     bHasMuzzleFlash=False
     ReloadCount=0
     bInstantHit=True
     InventoryGroup=208
     ItemName="Radio Player"
     PlayerViewOffset=(X=20.000000,Y=10.000000,Z=-16.000000)
     PlayerViewMesh=LodMesh'DeusExItems.MultitoolPOV'
     PickupViewMesh=LodMesh'DeusExItems.Multitool'
     ThirdPersonMesh=LodMesh'DeusExItems.Multitool3rd'
     LandSound=Sound'DeusExSounds.Generic.PlasticHit2'
     Icon=Texture'DeusExUI.Icons.BeltIconMultitool'
     largeIcon=Texture'DeusExUI.Icons.LargeIconMultitool'
     largeIconWidth=28
     largeIconHeight=46
     beltDescription="RADIO"
     Mesh=LodMesh'DeusExItems.Multitool'
     CollisionRadius=4.800000
     CollisionHeight=0.860000
     Mass=20.000000
     Buoyancy=10.000000
}
